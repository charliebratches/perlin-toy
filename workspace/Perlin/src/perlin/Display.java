package perlin;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.Dictionary;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Display extends JPanel{
	
	public Component imageComponent;
	
	BufferedImage image = null;

	
	//Image parameters:
	//dimension - 2D or 3D
	//mode - normal, lines, terrain, etc.
	//width - image width
	//height - image height
	//depth - image depth (z axis - 3D only!)
	//perlin - the noise map generated by ImprovedNoise class
	//size - wave size
	//offsetfactor - wave density
	//colorShiftAmount - RGB shift amount
		
	public int dimension = 2;
	public String mode = "NORMAL";
	public int width = 512;
	public int height = 512;
	public int depth = 512;
	public ImprovedNoise noise = new ImprovedNoise();
	public int octaves = 2;
	public double persistence = 0.8;
	public int size = 64;
	public int offsetFactor = 2;
	public int colorShiftAmount = 0;
	public int red = 128;
	public int green = 128;
	public int blue = 128;

	protected void paintComponent(Graphics g) {
		System.out.println("~REPAINT~");
		ImagePainter ip = new ImagePainter();
		BufferedImage image = ip.createImage(dimension, mode, width, height, depth, noise, octaves, persistence, size, offsetFactor, colorShiftAmount,
				red, green, blue);
		
		Graphics2D graphics2d = (Graphics2D) g;
	    graphics2d.drawImage(image, 0, 0, null);
	    super.paintComponents(g);
	}
	
	public void display(){

		JFrame frame = new JFrame("Perlin Toy");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		/////////////////////////////////////////////////////////////
		JPanel panel = new JPanel();
		JPanel sliders = new JPanel();
		sliders.setLayout(new BoxLayout(sliders, BoxLayout.Y_AXIS));
		

		panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));
		
		
		frame.setBackground(Color.DARK_GRAY);
		panel.setBackground(Color.DARK_GRAY);
		sliders.setBackground(Color.DARK_GRAY);

		////////////////////////////////////////////////////////////
		JButton dimensionButton = new JButton("Generate 3D Image");
		dimensionButton.setLayout(new BoxLayout(dimensionButton, BoxLayout.Y_AXIS));
		//modeButton.setPreferredSize(new Dimension(64, 64));
		dimensionButton.addActionListener(new ActionListener()
		{
		public void actionPerformed(ActionEvent e)
		{
		System.out.println("DIMENSION BUTTON PRESSED");
		if(dimension != 2){
			dimension = 2;
		}
		else if(dimension != 3){
			dimension = 3;
		}
		repaint();
		}
		});//Reads the action.
		////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////
		JButton modeButton = new JButton("Mode");
		modeButton.setLayout(new BoxLayout(modeButton, BoxLayout.Y_AXIS));
		//modeButton.setPreferredSize(new Dimension(64, 64));
		modeButton.addActionListener(new ActionListener()
		{
		    public void actionPerformed(ActionEvent e)
		    {
		    	System.out.println("MODE BUTTON PRESSED");
		    	if(!mode.equals("NORMAL")){
		    		mode = "NORMAL";
		    	}
		    	else if(!mode.equals("LINES")){
		    		mode = "LINES";
		    	}
		    	repaint();
		    }
		});//Reads the action.
		////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////
		JSlider octaveSlider = addSlider(sliders, 1, 6, 2, 1, "Octaves");
        octaveSlider.setMajorTickSpacing(1);
        octaveSlider.setMajorTickSpacing(1);
        octaveSlider.setPaintTicks(true);
        octaveSlider.setPaintLabels(true);

        octaveSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                octaves = octaveSlider.getValue();
                repaint();
            }
        });
        
		JSlider waveSlider = addSlider(sliders, 0, 128, 64, 1, "Wave Size");
        waveSlider.setMajorTickSpacing(1);
        waveSlider.setMajorTickSpacing(1);
        //waveSlider.setPaintTicks(true);
        waveSlider.setPaintLabels(true);
        
        waveSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                size = waveSlider.getValue();
                repaint();
            }
        });
        
        JSlider offsetSlider = addSlider(sliders, 2, 16, 2, 1, "Offset Size");
        offsetSlider.setMajorTickSpacing(1);
        offsetSlider.setMajorTickSpacing(1);
        //waveSlider.setPaintTicks(true);
        offsetSlider.setPaintLabels(true);
        
        offsetSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                offsetFactor = offsetSlider.getValue();
                repaint();
            }
        });
        
        JSlider colorShiftSlider = addSlider(sliders, 0, 64, 0, 1, "Color Shift Amount");
        colorShiftSlider.setMajorTickSpacing(1);
        colorShiftSlider.setMajorTickSpacing(1);
        colorShiftSlider.setPaintTicks(true);
        colorShiftSlider.setPaintLabels(false);
        
        colorShiftSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                colorShiftAmount = colorShiftSlider.getValue();
                repaint();
            }
        });
        
        JSlider redSlider = addSlider(sliders, 0, 255, 128, 1, "Red Channel");
        redSlider.setMajorTickSpacing(1);
        redSlider.setMajorTickSpacing(1);
        redSlider.setPaintTicks(true);
        redSlider.setPaintLabels(false);
    
        redSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                red = redSlider.getValue();
                repaint();
            }
        });
        
        JSlider greenSlider = addSlider(sliders, 0, 255, 128, 1, "Green Channel");
        greenSlider.setMajorTickSpacing(1);
        greenSlider.setMajorTickSpacing(1);
        greenSlider.setPaintTicks(true);
        greenSlider.setPaintLabels(false);
    
        greenSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                green = greenSlider.getValue();
                repaint();
            }
        });
        
        JSlider blueSlider = addSlider(sliders, 0, 255, 128, 1, "Blue Channel");
        blueSlider.setMajorTickSpacing(1);
        blueSlider.setMajorTickSpacing(1);
        blueSlider.setPaintTicks(true);
        blueSlider.setPaintLabels(false);
        
        blueSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent ce) {
        
                blue = blueSlider.getValue();
                repaint();
            }
        });
		////////////////////////////////////////////////////////////
		
		
		panel.add(this);
		panel.add(sliders);
		panel.add(modeButton);
		panel.add(dimensionButton);
		frame.add(panel);
		//frame.add(textField);
		sliders.setPreferredSize(new Dimension(64, 256));
		frame.setSize(1366, 768);
		
		//frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//frame.setUndecorated(true);
		frame.setVisible(true);
		panel.setVisible(true);
		//sliderPanel.setVisible(true);
	}
	
    public JSlider addSlider(JPanel mainPanel, int min, int max, int startPos, int tickSpacing, String myLabel){ 
    	JSlider thisSlider = new JSlider(JSlider.HORIZONTAL,
                min, max, startPos);
        thisSlider.setPreferredSize(new Dimension(500, 500));
        JLabel label = new JLabel(myLabel);
        label.setOpaque(true);
        mainPanel.add(label);
        mainPanel.add(thisSlider);
        
        if(max<255 && max != 10){
	        thisSlider.setMajorTickSpacing(10);
	        thisSlider.setMinorTickSpacing(1);
	        thisSlider.setPaintTicks(true);
	        thisSlider.setPaintLabels(true);
        }

        thisSlider.setForeground(Color.LIGHT_GRAY);
        thisSlider.setBackground(Color.DARK_GRAY);
        
        label.setForeground(Color.LIGHT_GRAY);
        label.setBackground(Color.DARK_GRAY);
        Dictionary dictionary = thisSlider.getLabelTable();

        return thisSlider;
    }

}
